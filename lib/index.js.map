{"version":3,"file":"index.js","sources":["../node_modules/@atxm/developer-console/lib/index.js","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\n\nvar DeveloperConsole = /** @class */ (function () {\n    function DeveloperConsole(options) {\n        if (options === void 0) { options = {}; }\n        this.name = options.name;\n        this.styleSheet = \"\\n      background-color: \" + (options.backgroundColor || 'darkgrey') + \";\\n      border-radius: 2px;\\n      color: \" + (options.color || 'white') + \";\\n      line-height: 1.5;\\n      padding: 1px 4px;\\n      text-shadow: 0 1px 0px rgba(0, 0, 0, 0.2);\\n    \";\n    }\n    DeveloperConsole.prototype.__console__ = function (type) {\n        var _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!(atom === null || atom === void 0 ? void 0 : atom.inDevMode()))\n            return;\n        args.unshift(\"%c\" + this.name + \"%c\", this.styleSheet, '');\n        (_a = window.console)[type].apply(_a, args);\n    };\n    DeveloperConsole.prototype.debug = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        this.__console__.apply(this, __spreadArray(['debug'], data));\n    };\n    DeveloperConsole.prototype.error = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        this.__console__.apply(this, __spreadArray(['error'], data));\n    };\n    DeveloperConsole.prototype.info = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        this.__console__.apply(this, __spreadArray(['info'], data));\n    };\n    DeveloperConsole.prototype.log = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        this.__console__.apply(this, __spreadArray(['log'], data));\n    };\n    DeveloperConsole.prototype.trace = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        this.__console__.apply(this, __spreadArray(['trace'], data));\n    };\n    DeveloperConsole.prototype.warn = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        this.__console__.apply(this, __spreadArray(['warn'], data));\n    };\n    return DeveloperConsole;\n}());\n\nexport default DeveloperConsole;\n","import DeveloperConsole from '@atxm/developer-console';\nimport meta from '../package.json';\n\nconst console = new DeveloperConsole({\n  name: meta.name\n});\n\nfunction initIDs(): void {\n  const editors = atom.workspace.getTextEditors();\n  editors.map(editor => addEditorID(editor));\n\n  const panes = atom.workspace.getPanes();\n  panes.map(pane => addPaneID(pane));\n\n  atom.workspace.observeTextEditors(editor => addEditorID(editor));\n  atom.workspace.observePanes(pane => addPaneID(pane));\n}\n\nfunction addEditorID(editor): void {\n  if (editor?.id) {\n    const view: HTMLElement = atom.views.getView(editor);\n    const buffer = editor.buffer;\n\n    if (editor?.id && !view.getAttribute('data-editor-id')) {\n      console.log(`Add data-attribute for editor #${editor.id}`);\n      view.setAttribute('data-editor-id', editor.id);\n    }\n\n    if (buffer.id && !view.getAttribute('data-buffer-id')) {\n      console.log(`Add data-attribute for buffer #${buffer.id}`);\n      view.setAttribute('data-buffer-id', buffer.id);\n    }\n  }\n}\n\nfunction addPaneID(pane): void {\n  if (pane?.id) {\n    const view: HTMLElement = atom.views.getView(pane);\n\n    if (!view.getAttribute('data-pane-id')) {\n      console.log(`Add data-attribute for pane #${pane.id}`);\n      view.setAttribute('data-pane-id', pane.id);\n    }\n  }\n}\n\nexport default initIDs;\n"],"names":["__spreadArray","to","from","i","il","length","j","console","DeveloperConsole","options","name","styleSheet","backgroundColor","color","prototype","__console__","type","_a","args","_i","arguments","atom","inDevMode","unshift","this","window","apply","debug","data","error","info","log","trace","warn","addEditorID","editor","id","view","views","getView","buffer","getAttribute","setAttribute","addPaneID","pane","workspace","getTextEditors","map","getPanes","observeTextEditors","observePanes"],"mappings":"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"}